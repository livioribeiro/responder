#[derive(Copy, Clone)]
pub enum Status {
    Continue,
    SwitchingProtocols,
    Processing,
    OK,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    MultiStatus,
    AlreadyReported,
    IMUsed,
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    UseProxy,
    TemporaryRedirect,
    PermanentRedirect,
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    PayloadTooLarge,
    RequestURITooLong,
    UnsupportedMediaType,
    RequestedRangeNotSatisfiable,
    ExpectationFailed,
    ImATeapot,
    MisdirectedRequest,
    UnprocessableEntity,
    Locked,
    FailedDependency,
    UpgradeRequired,
    PreconditionRequired,
    TooManyRequests,
    RequestHeaderFieldsTooLarge,
    UnavailableForLegalReasons,
    ClientClosedRequest,
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HTTPVersionNotSupported,
    VariantAlsoNegotiates,
    InsufficientStorage,
    LoopDetected,
    NotExtended,
    NetworkAuthenticationRequired,
    NetworkConnectTimeoutError,
}

impl Status {
    pub fn code(&self) -> u16 {
        self.into()
    }

    pub fn description(&self) -> &'static str {
        self.into()
    }
}

pub use self::Status::*;

impl Into<u16> for Status {
    fn into(self) -> u16 {
        self.code()
    }
}

impl Into<&'static str> for Status {
    fn into(self) -> &'static str {
        self.description()
    }
}

impl<'a> From<&'a Status> for u16  {
    fn from(status: &'a Status) -> u16 {
        match *status {
            Continue => 100,
            SwitchingProtocols => 101,
            Processing => 102,
            OK => 200,
            Created => 201,
            Accepted => 202,
            NonAuthoritativeInformation => 203,
            NoContent => 204,
            ResetContent => 205,
            PartialContent => 206,
            MultiStatus => 207,
            AlreadyReported => 208,
            IMUsed => 226,
            MultipleChoices => 300,
            MovedPermanently => 301,
            Found => 302,
            SeeOther => 303,
            NotModified => 304,
            UseProxy => 305,
            TemporaryRedirect => 307,
            PermanentRedirect => 308,
            BadRequest => 400,
            Unauthorized => 401,
            PaymentRequired => 402,
            Forbidden => 403,
            NotFound => 404,
            MethodNotAllowed => 405,
            NotAcceptable => 406,
            ProxyAuthenticationRequired => 407,
            RequestTimeout => 408,
            Conflict => 409,
            Gone => 410,
            LengthRequired => 411,
            PreconditionFailed => 412,
            PayloadTooLarge => 413,
            RequestURITooLong => 414,
            UnsupportedMediaType => 415,
            RequestedRangeNotSatisfiable => 416,
            ExpectationFailed => 417,
            ImATeapot => 418,
            MisdirectedRequest => 421,
            UnprocessableEntity => 422,
            Locked => 423,
            FailedDependency => 424,
            UpgradeRequired => 426,
            PreconditionRequired => 428,
            TooManyRequests => 429,
            RequestHeaderFieldsTooLarge => 431,
            UnavailableForLegalReasons => 451,
            ClientClosedRequest => 499,
            InternalServerError => 500,
            NotImplemented => 501,
            BadGateway => 502,
            ServiceUnavailable => 503,
            GatewayTimeout => 504,
            HTTPVersionNotSupported => 505,
            VariantAlsoNegotiates => 506,
            InsufficientStorage => 507,
            LoopDetected => 508,
            NotExtended => 510,
            NetworkAuthenticationRequired => 511,
            NetworkConnectTimeoutError => 599,
        }
    }
}

impl<'a> From<&'a Status> for &'static str {
    fn from(status: &'a Status) -> &'static str {
        match *status {
            Continue => "Continue",
            SwitchingProtocols => "Switching Protocols",
            Processing => "Processing",
            OK => "OK",
            Created => "Created",
            Accepted => "Accepted",
            NonAuthoritativeInformation => "Non-authoritative Information",
            NoContent => "No Content",
            ResetContent => "Reset Content",
            PartialContent => "Partial Content",
            MultiStatus => "Multi-Status",
            AlreadyReported => "Already Reported",
            IMUsed => "IM Used",
            MultipleChoices => "Multiple Choices",
            MovedPermanently => "Moved Permanently",
            Found => "Found",
            SeeOther => "See Other",
            NotModified => "Not Modified",
            UseProxy => "Use Proxy",
            TemporaryRedirect => "Temporary Redirect",
            PermanentRedirect => "Permanent Redirect",
            BadRequest => "Bad Request",
            Unauthorized => "Unauthorized",
            PaymentRequired => "Payment Required",
            Forbidden => "Forbidden",
            NotFound => "Not Found",
            MethodNotAllowed => "Method Not Allowed",
            NotAcceptable => "Not Acceptable",
            ProxyAuthenticationRequired => "Proxy Authentication Required",
            RequestTimeout => "Request Timeout",
            Conflict => "Conflict",
            Gone => "Gone",
            LengthRequired => "Length Required",
            PreconditionFailed => "Precondition Failed",
            PayloadTooLarge => "Payload Too Large",
            RequestURITooLong => "Request-URI Too Long",
            UnsupportedMediaType => "Unsupported Media Type",
            RequestedRangeNotSatisfiable => "Requested Range Not Satisfiable",
            ExpectationFailed => "Expectation Failed",
            ImATeapot => "I'm a teapot",
            MisdirectedRequest => "Misdirected Request",
            UnprocessableEntity => "Unprocessable Entity",
            Locked => "Locked",
            FailedDependency => "Failed Dependency",
            UpgradeRequired => "Upgrade Required",
            PreconditionRequired => "Precondition Required",
            TooManyRequests => "Too Many Requests",
            RequestHeaderFieldsTooLarge => "Request Header Fields Too Large",
            UnavailableForLegalReasons => "Unavailable For Legal Reasons",
            ClientClosedRequest => "Client Closed Request",
            InternalServerError => "Internal Server Error",
            NotImplemented => "Not Implemented",
            BadGateway => "Bad Gateway",
            ServiceUnavailable => "Service Unavailable",
            GatewayTimeout => "Gateway Timeout",
            HTTPVersionNotSupported => "HTTP Version Not Supported",
            VariantAlsoNegotiates => "Variant Also Negotiates",
            InsufficientStorage => "Insufficient Storage",
            LoopDetected => "Loop Detected",
            NotExtended => "Not Extended",
            NetworkAuthenticationRequired => "Network Authentication Required",
            NetworkConnectTimeoutError => "Network Connect Timeout Error",
        }
    }
}

pub fn description(status: u16) -> &'static str {
    match status {
        100 => Continue.description(),
        101 => SwitchingProtocols.description(),
        102 => Processing.description(),
        200 => OK.description(),
        201 => Created.description(),
        202 => Accepted.description(),
        203 => NonAuthoritativeInformation.description(),
        204 => NoContent.description(),
        205 => ResetContent.description(),
        206 => PartialContent.description(),
        207 => MultiStatus.description(),
        208 => AlreadyReported.description(),
        226 => IMUsed.description(),
        300 => MultipleChoices.description(),
        301 => MovedPermanently.description(),
        302 => Found.description(),
        303 => SeeOther.description(),
        304 => NotModified.description(),
        305 => UseProxy.description(),
        307 => TemporaryRedirect.description(),
        308 => PermanentRedirect.description(),
        400 => BadRequest.description(),
        401 => Unauthorized.description(),
        402 => PaymentRequired.description(),
        403 => Forbidden.description(),
        404 => NotFound.description(),
        405 => MethodNotAllowed.description(),
        406 => NotAcceptable.description(),
        407 => ProxyAuthenticationRequired.description(),
        408 => RequestTimeout.description(),
        409 => Conflict.description(),
        410 => Gone.description(),
        411 => LengthRequired.description(),
        412 => PreconditionFailed.description(),
        413 => PayloadTooLarge.description(),
        414 => RequestURITooLong.description(),
        415 => UnsupportedMediaType.description(),
        416 => RequestedRangeNotSatisfiable.description(),
        417 => ExpectationFailed.description(),
        418 => ImATeapot.description(),
        421 => MisdirectedRequest.description(),
        422 => UnprocessableEntity.description(),
        423 => Locked.description(),
        424 => FailedDependency.description(),
        426 => UpgradeRequired.description(),
        428 => PreconditionRequired.description(),
        429 => TooManyRequests.description(),
        431 => RequestHeaderFieldsTooLarge.description(),
        451 => UnavailableForLegalReasons.description(),
        499 => ClientClosedRequest.description(),
        500 => InternalServerError.description(),
        501 => NotImplemented.description(),
        502 => BadGateway.description(),
        503 => ServiceUnavailable.description(),
        504 => GatewayTimeout.description(),
        505 => HTTPVersionNotSupported.description(),
        506 => VariantAlsoNegotiates.description(),
        507 => InsufficientStorage.description(),
        508 => LoopDetected.description(),
        510 => NotExtended.description(),
        511 => NetworkAuthenticationRequired.description(),
        599 => NetworkConnectTimeoutError.description(),
        _ => "[Unknown HTTP Status]"
    }
}
